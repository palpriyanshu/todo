{"version":3,"sources":["fetchApis.js","components/Input.js","components/Heading.js","components/Todo.js","components/hocWithDelete.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["optionsForPost","content","headers","body","JSON","stringify","method","fetchApis","initiateState","fetch","then","x","json","currentStatus","deleteTodoList","deleteTask","id","addTask","task","updateTaskStatus","updateHeading","heading","module","exports","Input","props","useState","value","setValue","onSubmit","event","preventDefault","newValue","trim","className","type","onChange","target","defaultProps","Heading","isEditable","state","onStateChange","toggleEditable","onClick","Todo","status","Delete","onDelete","withDelete","Component","HeaderWithDelete","TodoWithDelete","TodoList","setState","useEffect","updateState","items","todoList","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f733653.chunk.js","sourcesContent":["const optionsForPost = (content) => {\n  return {\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(content),\n    method: 'POST',\n  };\n};\n\nconst fetchApis = {\n  initiateState: () => fetch('/api/initialState').then((x) => x.json()),\n  currentStatus: () => fetch('/api/currentState').then((x) => x.json()),\n  deleteTodoList: () => fetch('/api/deleteTodoList', optionsForPost()),\n  deleteTask: (id) => fetch('/api/deleteTask', optionsForPost({ id })),\n  addTask: (task) => fetch('/api/addTask', optionsForPost({ task })),\n  updateTaskStatus: (id) =>\n    fetch('/api/updateTaskStatus', optionsForPost({ id })),\n  updateHeading: (heading) =>\n    fetch('/api/updateHeading', optionsForPost({ heading })),\n};\nmodule.exports = { fetchApis };\n","import React, { useState } from 'react';\n\nconst Input = (props) => {\n  const [value, setValue] = useState(props.value);\n\n  const handleChange = ({ target }) => {\n    setValue(target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const newValue = value.trim();\n    if (newValue) {\n      props.onSubmit(newValue);\n      setValue(props.value);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        className={props.className}\n        type=\"text\"\n        onChange={handleChange}\n        value={value}\n      />\n    </form>\n  );\n};\n\nInput.defaultProps = {\n  value: '',\n};\n\nexport default Input;\n","import React, { useState } from 'react';\nimport Input from './Input';\n\nconst Heading = (props) => {\n  const [state, onStateChange] = useState({ isEditable: false });\n\n  const toggleEditable = () => {\n    onStateChange({ isEditable: !state.isEditable });\n  };\n\n  const submitHeading = (heading) => {\n    toggleEditable();\n    props.updateHeading(heading);\n  };\n\n  const { value } = props;\n  if (state.isEditable) {\n    return <Input onSubmit={submitHeading} value={value} className=\"heading\" />;\n  }\n\n  return (\n    <div className=\"heading pointer\" onClick={toggleEditable}>\n      {value}\n    </div>\n  );\n};\n\nexport default Heading;\n","import React from 'react';\n\nconst Todo = (props) => {\n  return (\n    <div\n      className={`todo ${props.status}`}\n      onClick={() => props.updateTaskStatus(props.id)}\n    >\n      {props.task}\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from 'react';\n\nconst Delete = ({ id, onDelete }) => {\n  return (\n    <div className=\"delete\" onClick={() => onDelete(id)}>\n      x\n    </div>\n  );\n};\n\nDelete.defaultProps = {\n  id: null,\n};\n\nconst withDelete = (Component) => {\n  return (props) => {\n    return (\n      <div className=\"todoBox\">\n        <Component {...props} />\n        <Delete onDelete={props.onDelete} id={props.id} />\n      </div>\n    );\n  };\n};\n\nexport default withDelete;\n","import React, { useState, useEffect } from 'react';\nimport Heading from './Heading';\nimport Todo from './Todo.js';\nimport Input from './Input.js';\nimport withDelete from './hocWithDelete';\n\nimport { fetchApis } from '../fetchApis.js';\n\nconst HeaderWithDelete = withDelete(Heading);\nconst TodoWithDelete = withDelete(Todo);\n\nconst TodoList = (props) => {\n  const [state, setState] = useState(null);\n\n  useEffect(() => {\n    fetchApis.initiateState().then(setState);\n  }, []);\n\n  const updateState = () => fetchApis.currentStatus().then(setState);\n\n  const deleteTodoList = () => fetchApis.deleteTodoList().then(updateState);\n\n  const deleteTask = (id) => fetchApis.deleteTask(id).then(updateState);\n\n  const updateHeading = (heading) =>\n    fetchApis.updateHeading(heading).then(updateState);\n\n  const updateTaskStatus = (id) =>\n    fetchApis.updateTaskStatus(id).then(updateState);\n\n  const addTask = (task) => fetchApis.addTask(task).then(updateState);\n\n  if (!state) {\n    return <p>loading...</p>;\n  }\n\n  const items = state.todoList.map(({ task, id, status }) => (\n    <TodoWithDelete\n      task={task}\n      id={id}\n      status={status}\n      onDelete={deleteTask}\n      key={id}\n      updateTaskStatus={updateTaskStatus}\n    />\n  ));\n\n  return (\n    <div>\n      <HeaderWithDelete\n        onDelete={deleteTodoList}\n        updateHeading={updateHeading}\n        value={state.heading}\n      />\n      {items}\n      <Input onSubmit={addTask} className=\"task\" />\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nconst App = (props) => <TodoList />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}